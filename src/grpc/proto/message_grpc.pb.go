// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.1
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSenderClient is the client API for MessageSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSenderClient interface {
	Send(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	StreamTest(ctx context.Context, opts ...grpc.CallOption) (MessageSender_StreamTestClient, error)
}

type messageSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSenderClient(cc grpc.ClientConnInterface) MessageSenderClient {
	return &messageSenderClient{cc}
}

func (c *messageSenderClient) Send(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/MessageSender/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSenderClient) StreamTest(ctx context.Context, opts ...grpc.CallOption) (MessageSender_StreamTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageSender_ServiceDesc.Streams[0], "/MessageSender/StreamTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSenderStreamTestClient{stream}
	return x, nil
}

type MessageSender_StreamTestClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type messageSenderStreamTestClient struct {
	grpc.ClientStream
}

func (x *messageSenderStreamTestClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSenderStreamTestClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSenderServer is the server API for MessageSender service.
// All implementations must embed UnimplementedMessageSenderServer
// for forward compatibility
type MessageSenderServer interface {
	Send(context.Context, *MessageRequest) (*MessageResponse, error)
	StreamTest(MessageSender_StreamTestServer) error
	mustEmbedUnimplementedMessageSenderServer()
}

// UnimplementedMessageSenderServer must be embedded to have forward compatible implementations.
type UnimplementedMessageSenderServer struct {
}

func (UnimplementedMessageSenderServer) Send(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessageSenderServer) StreamTest(MessageSender_StreamTestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTest not implemented")
}
func (UnimplementedMessageSenderServer) mustEmbedUnimplementedMessageSenderServer() {}

// UnsafeMessageSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSenderServer will
// result in compilation errors.
type UnsafeMessageSenderServer interface {
	mustEmbedUnimplementedMessageSenderServer()
}

func RegisterMessageSenderServer(s grpc.ServiceRegistrar, srv MessageSenderServer) {
	s.RegisterService(&MessageSender_ServiceDesc, srv)
}

func _MessageSender_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSenderServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageSender/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSenderServer).Send(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSender_StreamTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSenderServer).StreamTest(&messageSenderStreamTestServer{stream})
}

type MessageSender_StreamTestServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type messageSenderStreamTestServer struct {
	grpc.ServerStream
}

func (x *messageSenderStreamTestServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSenderStreamTestServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSender_ServiceDesc is the grpc.ServiceDesc for MessageSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageSender",
	HandlerType: (*MessageSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MessageSender_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTest",
			Handler:       _MessageSender_StreamTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

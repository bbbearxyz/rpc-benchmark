// Code generated by Kitex v0.2.1. DO NOT EDIT.

package messagesender

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"rpc_test/src/kitex/proto/kitex_gen/message_proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageSenderServiceInfo
}

var messageSenderServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageSender"
	handlerType := (*message_proto.MessageSender)(nil)
	methods := map[string]kitex.MethodInfo{
		"Send":       kitex.NewMethodInfo(sendHandler, newSendArgs, newSendResult, false),
		"StreamTest": kitex.NewMethodInfo(streamTestHandler, newStreamTestArgs, newStreamTestResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message_proto.MessageRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message_proto.MessageSender).Send(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendArgs:
		success, err := handler.(message_proto.MessageSender).Send(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendResult)
		realResult.Success = success
	}
	return nil
}
func newSendArgs() interface{} {
	return &SendArgs{}
}

func newSendResult() interface{} {
	return &SendResult{}
}

type SendArgs struct {
	Req *message_proto.MessageRequest
}

func (p *SendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendArgs) Unmarshal(in []byte) error {
	msg := new(message_proto.MessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendArgs_Req_DEFAULT *message_proto.MessageRequest

func (p *SendArgs) GetReq() *message_proto.MessageRequest {
	if !p.IsSetReq() {
		return SendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendArgs) IsSetReq() bool {
	return p.Req != nil
}

type SendResult struct {
	Success *message_proto.MessageResponse
}

var SendResult_Success_DEFAULT *message_proto.MessageResponse

func (p *SendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendResult) Unmarshal(in []byte) error {
	msg := new(message_proto.MessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendResult) GetSuccess() *message_proto.MessageResponse {
	if !p.IsSetSuccess() {
		return SendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendResult) SetSuccess(x interface{}) {
	p.Success = x.(*message_proto.MessageResponse)
}

func (p *SendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func streamTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &messageSenderStreamTestServer{st}
	return handler.(message_proto.MessageSender).StreamTest(stream)
}

type messageSenderStreamTestClient struct {
	streaming.Stream
}

func (x *messageSenderStreamTestClient) Send(m *message_proto.MessageRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *messageSenderStreamTestClient) Recv() (*message_proto.MessageResponse, error) {
	m := new(message_proto.MessageResponse)
	return m, x.Stream.RecvMsg(m)
}

type messageSenderStreamTestServer struct {
	streaming.Stream
}

func (x *messageSenderStreamTestServer) Send(m *message_proto.MessageResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *messageSenderStreamTestServer) Recv() (*message_proto.MessageRequest, error) {
	m := new(message_proto.MessageRequest)
	return m, x.Stream.RecvMsg(m)
}

func newStreamTestArgs() interface{} {
	return &StreamTestArgs{}
}

func newStreamTestResult() interface{} {
	return &StreamTestResult{}
}

type StreamTestArgs struct {
	Req *message_proto.MessageRequest
}

func (p *StreamTestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in StreamTestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *StreamTestArgs) Unmarshal(in []byte) error {
	msg := new(message_proto.MessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StreamTestArgs_Req_DEFAULT *message_proto.MessageRequest

func (p *StreamTestArgs) GetReq() *message_proto.MessageRequest {
	if !p.IsSetReq() {
		return StreamTestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StreamTestArgs) IsSetReq() bool {
	return p.Req != nil
}

type StreamTestResult struct {
	Success *message_proto.MessageResponse
}

var StreamTestResult_Success_DEFAULT *message_proto.MessageResponse

func (p *StreamTestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in StreamTestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *StreamTestResult) Unmarshal(in []byte) error {
	msg := new(message_proto.MessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StreamTestResult) GetSuccess() *message_proto.MessageResponse {
	if !p.IsSetSuccess() {
		return StreamTestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StreamTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*message_proto.MessageResponse)
}

func (p *StreamTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Send(ctx context.Context, Req *message_proto.MessageRequest) (r *message_proto.MessageResponse, err error) {
	var _args SendArgs
	_args.Req = Req
	var _result SendResult
	if err = p.c.Call(ctx, "Send", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamTest(ctx context.Context) (MessageSender_StreamTestClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "StreamTest", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &messageSenderStreamTestClient{res.Stream}
	return stream, nil
}
